{"version":3,"sources":["redux/types.js","redux/reducers/userReducer.js","redux/reducers/dataReducer.js","redux/reducers/uiReducer.js","redux/stores.js","components/Navbar.js","components/Shouts.js","components/Profile.js","utils/Placeholder.js","redux/actions/userActions.js","pages/home.js","redux/actions/dataActions.js","pages/login.js","pages/signup.js","pages/logout.js","App.js","utils/appstyles.js","serviceWorker.js","index.js","images/logo.png"],"names":["API_ENDPOINT","initialState","authenticated","credentials","likes","notifications","screams","loading","errors","middleware","thunk","reducers","combineReducers","user","state","action","type","payload","data","ui","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Navbar","this","props","AppBar","Toolbar","className","Button","color","component","Link","to","LinearProgress","Component","connect","Shouts","dayjs","extend","relativetime","shout","body","userHandle","userImgPic","createdAt","classes","Card","card","CardMedia","image","title","CardContent","Typography","variant","fromNow","content","withStyles","theme","shouts","Profile","imageURL","bio","location","profile","Placeholder","logoutUser","dispatch","localStorage","removeItem","axios","defaults","headers","common","setAuthorizationHeader","token","FBIdToken","setAuthorizationStorage","setItem","home","getAllScreams","getUserData","loadScreamFromProps","map","scream","key","screamID","placeHolder","loadProfileDataFromStore","Grid","container","item","sm","xs","mapActionToProps","get","then","res","catch","err","console","log","response","loginRegister","marginLeftRight","login","handleSubmit","e","preventDefault","userInput","email","password","loginUser","history","handleChange","setState","target","name","value","formContainer","src","logoURL","height","width","alt","noValidate","onSubmit","Login","TextField","textField","label","id","onChange","error","helperText","disabled","fullWidth","button","post","Token","push","signup","cpassword","userhandle","signupUser","Registration","newUser","logout","jwtDecode","exp","Date","now","createMuiTheme","palette","primary","light","main","contrastText","secondary","fontWeight","pageImage","textAlign","marginTop","progress","marginBottom","marginLeft","marginRight","display","minWidth","margin","borderRadius","objectFit","Width","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.dde7e642.chunk.js","sourcesContent":["//User reducer types\r\nexport const SET_AUTHENTICATED = \"SET_AUTHENTICATED\";\r\nexport const SET_UNAUTHENTICATED = \"SET_UNAUTHENTICATED\";\r\nexport const SET_USER = \"SET_USER\";\r\nexport const LOADING_USER = \"LOADING_USER\";\r\nexport const USER_TOKEN = \"FBIdToken\";\r\n//UI reducer types\r\nexport const SET_ERRORS = \"SET_ERRORS\";\r\nexport const LOADING_UI = \"LOADING_UI\";\r\nexport const UNLOADING_UI = \"UNLOADING_UI\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\nexport const SET_SCREAMS = \"SET_SCREAMS\";\r\n//API Endpoint URL\r\nexport const API_ENDPOINT =\r\n  \"https://asia-east2-fir-crud-8d71b.cloudfunctions.net/api\";\r\n","//Reducer connected to USER store state.\r\nimport { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED } from \"../types\";\r\n//It is recommended to set initial state in every reducer.\r\nconst initialState = {\r\n  authenticated: false,\r\n  credentials: null,\r\n  likes: [],\r\n  notifications: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    //return the current state and set the auth TRUE\r\n    case SET_AUTHENTICATED:\r\n      return { ...state, authenticated: true };\r\n    //clear all the state by returning initial state, and set the auth FALSE.\r\n    case SET_UNAUTHENTICATED:\r\n      return { initialState, authenticated: false };\r\n    //set the user state as NEW and set the auth as TRUE.\r\n    //using ... will map all the payload data to the corresponding initial state. (2 or more)\r\n    //for single object, we user, sample_name: action.payload.\r\n    case SET_USER:\r\n      return {\r\n        ...action.payload,\r\n        authenticated: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Reducer connected to DATA store state.\r\nimport { SET_SCREAMS } from \"../types\";\r\n//It is recommended to initiate the default value of the state.\r\nconst initialState = {\r\n  screams: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    //set the scream state as NEW.\r\n    case SET_SCREAMS:\r\n      return { screams: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Reducer connected to UI store state.\r\nimport { LOADING_UI, CLEAR_ERRORS, SET_ERRORS, UNLOADING_UI } from \"../types\";\r\n//It is recommended to set initial state in every reducer.\r\nconst initialState = {\r\n  loading: false,\r\n  errors: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    //return the current state and animate the loadingbar.\r\n    case LOADING_UI:\r\n      return { ...state, loading: true };\r\n    //return the current state and stop the loadingbar.\r\n    case UNLOADING_UI:\r\n      return { ...state, loading: false };\r\n    //set the errors as new and stop the loadingbar.\r\n    case SET_ERRORS:\r\n      return { loading: false, errors: action.payload };\r\n    //return the current state and clear only the errors.\r\n    case CLEAR_ERRORS:\r\n      return { ...state, errors: {} };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n//above is the needed libs to import\r\n\r\n//seperated reducers (logic code)\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport dataReducer from \"./reducers/dataReducer\";\r\nimport uiReducer from \"./reducers/uiReducer\";\r\n\r\n//createStore has initial state arg\r\nconst initialState = {};\r\n//put the thunk in array\r\nconst middleware = [thunk];\r\n//combining reducers\r\nconst reducers = combineReducers({\r\n  user: userReducer,\r\n  data: dataReducer,\r\n  ui: uiReducer,\r\n});\r\n\r\n//initialization of store redux takes 3 args. (REDUCERS,INITIAL_STATE,DEV_TOOLS_EXTENTION)\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","//In every page or component you create, it must be in JSX.\r\n//So we will import React, and Component from REACT.\r\n//Link is used for redirecting page in REACT.\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//In order to connect to our global state (store), We must use the CONNECT from REACT-REDUX.\r\nimport { connect } from \"react-redux\";\r\n//Material-UI Components\r\n//MUI is a front-end solution.\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n//In every component, a class must have a render(){return(...)} tags inside or it wont load.\r\nclass Navbar extends Component {\r\n  render() {\r\n    //extract the loading state from UI Props from Redux Store.\r\n    const {\r\n      ui: { loading },\r\n      authenticated,\r\n    } = this.props;\r\n    return (\r\n      <AppBar>\r\n        <Toolbar className=\"toolbarcenter\">\r\n          <Button color=\"inherit\" component={Link} to=\"/\">\r\n            Homes\r\n          </Button>\r\n\r\n          {authenticated ? (\r\n            <Button color=\"inherit\" component={Link} to=\"/logout\">\r\n              Logout\r\n            </Button>\r\n          ) : (\r\n            <div>\r\n              <Button color=\"inherit\" component={Link} to=\"/login\">\r\n                Login\r\n              </Button>\r\n              <Button color=\"inherit\" component={Link} to=\"/signup\">\r\n                Register\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n        {\r\n          //Loading bar animation prevents user likely to leave the site (boredom)\r\n          //Check the loading state if true, return empty div tags if not.\r\n        }\r\n        {loading ? <LinearProgress /> : <div></div>}\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n//Map the state from REDUX STORE to Navbar Props.\r\nconst mapStateToProps = (state) => ({\r\n  ui: state.ui,\r\n  authenticated: state.user.authenticated,\r\n});\r\n//Finally connect the app with state mapped to Props.\r\nexport default connect(mapStateToProps)(Navbar);\r\n","//In every page or component you create, it must be in JSX.\r\n//So we will import React, and Component from REACT.\r\n//Link is used for redirecting page in REACT.\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//DAYJS in an open-source library that converts the time, see my fb post for links\r\nimport dayjs from \"dayjs\";\r\nimport relativetime from \"dayjs/plugin/relativeTime\";\r\n//Material-UI Components\r\n//MUI is a front-end solution.\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n//Using withstyles, we can add some styles for the page.\r\n//this theme is connected to appstyles.js via MUI theme @ App.js\r\n//we are now allowed to use className={classes.~~~~}\r\n//for some reasons, if we dont give the image classes a height and width, it wont show.\r\nconst styles = (theme) => ({ ...theme.shouts });\r\n//In every component, a class must have a render(){return(...)} tags inside or it wont load.\r\nexport class Shouts extends Component {\r\n  render() {\r\n    //relative-time for dayjs is all we need.\r\n    dayjs.extend(relativetime);\r\n    //extract the data from shout props to this props. (Shout shout=\"THIS_DATA\")\r\n    const {\r\n      shout: { body, userHandle, userImgPic, createdAt },\r\n      classes,\r\n    } = this.props;\r\n    //now return the shout with data collected from shout props\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardMedia\r\n          image={userImgPic}\r\n          title=\"Profile Picture\"\r\n          className={classes.image}\r\n        />\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"h5\"\r\n            color=\"primary\"\r\n            component={Link}\r\n            to={`/users/${userHandle}`}\r\n          >\r\n            {userHandle}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {dayjs(createdAt).fromNow()}\r\n          </Typography>\r\n          <Typography\r\n            variant=\"body1\"\r\n            className={classes.content}\r\n            color=\"textPrimary\"\r\n          >\r\n            {body}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n//We dont have to map the global state (redux store) here\r\n//Since we used this component individually.\r\n//There is mapping happening outside of this component and calls more than once.\r\nexport default withStyles(styles)(Shouts);\r\n","//So we will import React, and Component from REACT.\r\n//Link is used for redirecting page in REACT.\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//In order to connect to our global state (store), We must use the CONNECT from REACT-REDUX.\r\nimport { connect } from \"react-redux\";\r\n//Material-UI Components\r\n//MUI is a front-end solution.\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n//Using withstyles, we can add some styles for the page.\r\n//this theme is connected to appstyles.js via MUI theme @ App.js\r\n//we are now allowed to use className={classes.~~~~}\r\nconst style = (theme) => ({ ...theme.profile });\r\n//In every component, a class must have a render(){return(...)} tags inside or it wont load.\r\nclass Profile extends Component {\r\n  render() {\r\n    //classes can access theme class.\r\n    //extract the user state from REDUX STORE to this props.\r\n    const {\r\n      classes,\r\n      user: {\r\n        credentials: { userHandle, imageURL, bio, location },\r\n      },\r\n    } = this.props;\r\n\r\n    return (\r\n      <Card>\r\n        <CardMedia\r\n          image={imageURL}\r\n          title=\"Profile Picture\"\r\n          className={classes.image}\r\n        />\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"h5\"\r\n            color=\"primary\"\r\n            component={Link}\r\n            to={`/users/${userHandle}`}\r\n          >\r\n            {userHandle}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {bio}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textPrimary\">\r\n            {location}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n//Map the user state from store to this.props.\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n//Finally connect with redux using higher order functions.\r\nexport default connect(mapStateToProps)(withStyles(style)(Profile));\r\n","import React, { Component } from \"react\";\r\n//This is a component for data placeholder\r\n//Magic comes from PH.CSS (Pure CSS File downloaded last 06/28/2020)\r\nclass Placeholder extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"ph-item\">\r\n          <div className=\"ph-col-12\">\r\n            <div className=\"ph-picture\"></div>\r\n            <div className=\"ph-row\">\r\n              <div className=\"ph-col-6 big\"></div>\r\n              <div className=\"ph-col-4 empty big\"></div>\r\n              <div className=\"ph-col-2 big\"></div>\r\n              <div className=\"ph-col-4\"></div>\r\n              <div className=\"ph-col-8 empty\"></div>\r\n              <div className=\"ph-col-6\"></div>\r\n              <div className=\"ph-col-6 empty\"></div>\r\n              <div className=\"ph-col-12\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","//This is the ACTION page. We DISPATCH an ACTION here and calls REDUX REDUCER.\r\n//Reducer will then update the state and return it to the STORE.\r\n//To avoid TYPOS, we will user CONSTANT variables located in TYPES.JS\r\n//Every ACTION should fire LOADING state.\r\nimport {\r\n  SET_USER,\r\n  SET_ERRORS,\r\n  CLEAR_ERRORS,\r\n  LOADING_UI,\r\n  UNLOADING_UI,\r\n  USER_TOKEN,\r\n  SET_UNAUTHENTICATED,\r\n  API_ENDPOINT,\r\n} from \"../types\";\r\n//To get the data from our API ENDPOINTS, we will use AXIOS.\r\n//Since we are using PROXY in package.json, /screams, /users will work\r\nimport axios from \"axios\";\r\n//LoginUser func requires 2 arguments. Input and History (*to get back)\r\n//It should return VALID request data to our API or it will break.\r\nexport const loginUser = (userInput, history) => (dispatch) => {\r\n  //Load the loading bar.\r\n  dispatch({ type: LOADING_UI });\r\n  //Fire axios, stop the loading bar and clear errors.\r\n  //Set authorization token to have access in our HEADERS.\r\n  //Set also in local storage. If success, push HISTORY.\r\n  axios\r\n    .post(`${API_ENDPOINT}/login`, userInput)\r\n    .then((res) => {\r\n      dispatch({ type: UNLOADING_UI });\r\n      dispatch({ type: CLEAR_ERRORS });\r\n      setAuthorizationStorage(res.data.Token);\r\n      setAuthorizationHeader(res.data.Token);\r\n      history.push(\"/\");\r\n    })\r\n    .catch((err) => {\r\n      dispatch({ type: SET_ERRORS, payload: err.response.data });\r\n    });\r\n  //Else, dispatch an ERROR type with PAYLOAD data response.\r\n};\r\n//Same goes with signUp action.\r\nexport const signupUser = (newUser, history) => (dispatch) => {\r\n  dispatch({ type: LOADING_UI });\r\n  axios\r\n    .post(`${API_ENDPOINT}/signup`, newUser)\r\n    .then((res) => {\r\n      dispatch({ type: UNLOADING_UI });\r\n      dispatch({ type: CLEAR_ERRORS });\r\n      setAuthorizationStorage(res.data.Token);\r\n      setAuthorizationHeader(res.data.Token);\r\n      history.push(\"/\");\r\n    })\r\n    .catch((err) => {\r\n      dispatch({ type: SET_ERRORS, payload: err.response.data });\r\n    });\r\n};\r\n//Logout action is the same, delete the header, remove in localStorage.\r\nexport const logoutUser = () => (dispatch) => {\r\n  //remove the token in storage\r\n  localStorage.removeItem(USER_TOKEN);\r\n  //clear the headers used for (getUserData)\r\n  delete axios.defaults.headers.common[\"Authorization\"];\r\n  //set un-authenticated and reset back to initial state.\r\n  dispatch({ type: SET_UNAUTHENTICATED });\r\n  //if theres an error, clear it for next login.\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};\r\nexport const getUserData = () => (dispatch) => {\r\n  //::::::::::::::::TODO: Check if the TOKEN is EXPIRE:::::::::::::::::::::::\r\n  //This endpoint will get the HEADER value, Authorization: Bearer: %%%\r\n  //The user must be logged in.\r\n  axios\r\n    .get(`${API_ENDPOINT}/users/view`)\r\n    .then((res) => {\r\n      dispatch({ type: SET_USER, payload: res.data });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst setAuthorizationHeader = (token) => {\r\n  //get the response token from our API\r\n  const FBIdToken = `Bearer ${token}`;\r\n  //put the token in the headers so it can access the getUserData\r\n  axios.defaults.headers.common[\"Authorization\"] = FBIdToken;\r\n};\r\n\r\nconst setAuthorizationStorage = (token) => {\r\n  const FBIdToken = `Bearer ${token}`;\r\n  //set item to the storage\r\n  localStorage.setItem(USER_TOKEN, FBIdToken);\r\n};\r\n","//In every page or component you create, it must be in JSX.\r\n//So we will import React, and Component from REACT.\r\n//In order to connect to our global state (store), We must use the CONNECT from REACT-REDUX.\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//Material UI Grid Component lets us divide the page for better experience.\r\n//withStyle is for custom layout.\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n//Here are some needed components in HOME.JS\r\n//It is better to separate this for cleaner code and avoid repeating of code.\r\n//Hold CTRL+[Left Click] to learn more about it.\r\nimport Navbar from \"../components/Navbar\";\r\nimport Shouts from \"../components/Shouts\";\r\nimport Profile from \"../components/Profile\";\r\nimport Placeholder from \"../utils/Placeholder\";\r\n//Actions likely to DISPATCH to STORE.\r\n//Some axios thing happens here, we process user requests here.\r\nimport { getUserData } from \"../redux/actions/userActions\";\r\nimport { getAllScreams } from \"../redux/actions/dataActions\";\r\n//MUI Global Theming\r\n//This theme tags is connected to APPSTYLES.JS via MUI Theme Provider @ App.js\r\n//We are now allowed to use className={classes.~~~~}\r\nconst style = (theme) => ({ ...theme.loginRegister, ...theme.marginLeftRight });\r\nclass home extends Component {\r\n  //componentDidMount() performs right after the components are fully loaded.\r\n  //“State” is an object that represents the parts of the app that can change.\r\n  componentDidMount() {\r\n    //Get the shouts and userdata from these FUNCTIONS in DATA ACTIONS.\r\n    //It would return a state from Redux Store and pass it here as PROPS.\r\n    //These functions was mapped below.\r\n    this.props.getAllScreams();\r\n    this.props.getUserData();\r\n  }\r\n  render() {\r\n    //Classes used for styling the component.\r\n    const { classes } = this.props;\r\n    //We have already mapped the data from redux store to this.props below.\r\n    //In our case, we declare a variable that is also a component.\r\n    //Every changes happening in THIS.PROPS.DATA.SCREAMS\r\n    //..it reflects the declared variable to the returned varibles {loadScreamF...}\r\n    //if this.props.data.screams is TRUE, then ... ELSE throw a PLACEHOLDER.\r\n    let loadScreamFromProps = this.props.data.screams ? (\r\n      //React needs unique key in every iteration, EG.: key={scream.ID}\r\n      //Note: When you have an array of data [] from store, you need to map it.\r\n      this.props.data.screams.map((scream) => (\r\n        <Shouts shout={scream} key={scream.screamID} />\r\n      ))\r\n    ) : (\r\n      <div className={classes.placeHolder}>\r\n        <Placeholder />\r\n      </div>\r\n    );\r\n    //Same with screams, but this component calls once and re-render the data itself.\r\n    //If loadProfileDataFromStore is NOT NULL, put PROFILE COMPONENT, else throw PLACEHOLDER.\r\n    let loadProfileDataFromStore = this.props.user.credentials ? (\r\n      <Profile />\r\n    ) : (\r\n      <div className={classes.placeHolder}>\r\n        <Placeholder />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <div className=\"container\">\r\n          <Grid container>\r\n            <Grid item sm={8} xs={12}>\r\n              {loadScreamFromProps}\r\n            </Grid>\r\n            <Grid item sm={4} xs={12}>\r\n              {loadProfileDataFromStore}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Map the redux global state to this props.\r\n//We can now access these states thru THIS.PROPS.DATA,USER...etc\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data,\r\n  user: state.user,\r\n});\r\n\r\n//Map the ACTIONS to PROPS and CONNECT to REDUX.\r\n//If the functions (actions) didnt mentioned here, it wont allow to use DISPATCH.\r\nconst mapActionToProps = {\r\n  getUserData,\r\n  getAllScreams,\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(style)(home));\r\n","//This data actions. A passive action for fetching data only.\r\n//Rarely use of LOADING state here.\r\nimport { SET_SCREAMS, API_ENDPOINT } from \"../types\";\r\nimport axios from \"axios\";\r\nexport const getAllScreams = () => (dispatch) => {\r\n  axios\r\n    .get(`${API_ENDPOINT}/screams`)\r\n    .then((res) => {\r\n      dispatch({ type: SET_SCREAMS, payload: res.data });\r\n    })\r\n    .catch((err) => console.log(err.response));\r\n};\r\n","import React, { Component } from \"react\";\r\nimport logoURL from \"../images/logo.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Redux thing\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../redux/actions/userActions\";\r\n//Material Custom Style\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst style = (theme) => ({ ...theme.loginRegister });\r\n\r\n//You cannot put classes outside of the class component\r\n//Simply because render() holds the component itself\r\n//So declare classes inside render()\r\nclass login extends Component {\r\n  //state = { email: \"\", password: \"\", loading: false, errors: {} };\r\n  //good practice to use constructor\r\n  constructor() {\r\n    super();\r\n    this.state = { email: \"\", password: \"\" };\r\n  }\r\n  handleSubmit = (e) => {\r\n    //POST method\r\n    e.preventDefault(); //hides the url bar get method\r\n    const userInput = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n    };\r\n    //userActions.js\r\n    this.props.loginUser(userInput, this.props.history);\r\n  };\r\n\r\n  //setting the new state onHandleChange\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //the main hierarchy tips is\r\n  //class == initiatiation and functions creations (didMount)\r\n  //render == coding zone, logic usually happens here\r\n  //return == putting all together! (If condition usually)\r\n  render() {\r\n    const {\r\n      classes,\r\n      ui: { loading, errors },\r\n    } = this.props;\r\n    //get the errors array in this.state\r\n    //errors holds an object {} from axios state\r\n\r\n    //linear progress is quite fun, try modifying it! :)\r\n    //if loading? show that element\r\n    //disable the components when is loading is true\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <Grid container className={classes.formContainer}>\r\n          <Grid item sm />\r\n          <Grid item sm>\r\n            <br />\r\n            <center>\r\n              <img src={logoURL} height=\"100%\" width=\"100%\" alt=\"asdsa\" />\r\n            </center>\r\n            <br />\r\n            {loading ? <h3>Logging in...</h3> : <h3>Login Account</h3>}\r\n            <form noValidate onSubmit={this.handleSubmit}>\r\n              {errors.Login && <div className=\"error\">{errors.Login}</div>}\r\n              <h4>Email Address</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Enter your email address\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                onChange={this.handleChange}\r\n                error={errors.email ? true : false}\r\n                helperText={errors.email}\r\n                disabled={loading ? true : false}\r\n                value={this.state.email}\r\n                fullWidth\r\n              />\r\n              <h4>Password</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Enter your password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                onChange={this.handleChange}\r\n                helperText={errors.password}\r\n                error={errors.password ? true : false}\r\n                disabled={loading ? true : false}\r\n                value={this.state.password}\r\n                fullWidth\r\n              ></TextField>\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={loading ? true : false}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </form>\r\n            <br />\r\n            <br />\r\n            <Typography>\r\n              Dont have an account? <Link to=\"/signup\"> Sign Up Now!</Link>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm />\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlogin.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  loginUser: PropTypes.func.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  ui: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n  ui: state.ui,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  loginUser,\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(style)(login));\r\n","import React, { Component } from \"react\";\r\nimport logoURL from \"../images/logo.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { signupUser } from \"../redux/actions/userActions\";\r\n//Material Custom Style\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst style = (theme) => ({ ...theme.loginRegister });\r\n\r\n//You cannot put classes outside of the class component\r\n//Simply because render() holds the component itself\r\n//So declare classes inside render()\r\nclass signup extends Component {\r\n  //state = { email: \"\", password: \"\", loading: false, errors: {} };\r\n  //good practice to use constructor\r\n  //we need to set state as empty string to use isEmpty functions in CRUD, else it will throw NULL.\r\n  //TODO: EMAIL VALIDATION\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      cpassword: \"\",\r\n      userhandle: \"\",\r\n    };\r\n  }\r\n  handleSubmit = (e) => {\r\n    //POST method\r\n    e.preventDefault(); //hides the url bar get method\r\n    const userInput = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      cpassword: this.state.cpassword,\r\n      userHandle: this.state.userhandle,\r\n    };\r\n    //for success data, res.data\r\n    //for error data, err.response.data -- whenever it goes to errror\r\n    this.props.signupUser(userInput, this.props.history);\r\n  };\r\n\r\n  //setting the new state onHandleChange\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //the main hierarchy tips is\r\n  //class == initiatiation and functions creations (didMount)\r\n  //render == coding zone, logic usually happens here\r\n  //return == putting all together! (If condition usually)\r\n  render() {\r\n    const {\r\n      classes,\r\n      ui: { errors, loading },\r\n    } = this.props;\r\n    //get the errors array in this.state\r\n    //errors holds an object {} from axios state\r\n\r\n    //linear progress is quite fun, try modifying it! :)\r\n    //if loading? show that element\r\n    //disable the components when is loading is true\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <Grid container className={classes.formContainer}>\r\n          <Grid item sm />\r\n          <Grid item sm>\r\n            <br />\r\n            <center>\r\n              <img src={logoURL} height=\"100%\" width=\"100%\" alt=\"asdsa\" />\r\n            </center>\r\n            <br />\r\n            {loading ? <h3>Signing up...</h3> : <h3>Account Registration</h3>}\r\n            <form noValidate onSubmit={this.handleSubmit}>\r\n              {errors.Registration && (\r\n                <div className=\"error\">{errors.Registration}</div>\r\n              )}\r\n              <h4>Email Address</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Enter your email address\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                onChange={this.handleChange}\r\n                error={errors.email ? true : false}\r\n                helperText={errors.email}\r\n                disabled={loading ? true : false}\r\n                value={this.state.email}\r\n                fullWidth\r\n              />\r\n              <h4>Password</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Enter your password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                onChange={this.handleChange}\r\n                helperText={errors.password}\r\n                error={errors.password ? true : false}\r\n                disabled={loading ? true : false}\r\n                value={this.state.password}\r\n                fullWidth\r\n              ></TextField>\r\n              <h4>Confirm Password</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Re-enter your password\"\r\n                id=\"cpassword\"\r\n                name=\"cpassword\"\r\n                type=\"password\"\r\n                onChange={this.handleChange}\r\n                helperText={errors.cpassword}\r\n                error={errors.cpassword ? true : false}\r\n                disabled={loading ? true : false}\r\n                value={this.state.cpassword}\r\n                fullWidth\r\n              ></TextField>\r\n              <h4>Username</h4>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"Enter your desired username\"\r\n                id=\"userhandle\"\r\n                name=\"userhandle\"\r\n                onChange={this.handleChange}\r\n                helperText={errors.userhandle}\r\n                error={errors.userhandle ? true : false}\r\n                disabled={loading ? true : false}\r\n                value={this.state.userhandle}\r\n                fullWidth\r\n              ></TextField>\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={loading ? true : false}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </form>\r\n            <br />\r\n            <br />\r\n            <Typography>\r\n              Already have an account? <Link to=\"/login\"> Login Now!</Link>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm />\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nsignup.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ui: state.ui,\r\n});\r\n\r\nexport default connect(mapStateToProps, { signupUser })(\r\n  withStyles(style)(signup)\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../redux/actions/userActions\";\r\n\r\nclass logout extends Component {\r\n  render() {\r\n    this.props.logoutUser();\r\n    //TODO: redirect to logout page\r\n    this.props.history.push(\"/login\");\r\n    return <div></div>;\r\n  }\r\n}\r\n\r\nconst mapActionToProps = {\r\n  logoutUser,\r\n};\r\nexport default connect(null, mapActionToProps)(logout);\r\n","import React from \"react\";\n//React Components to navigate pages\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n//For decoding the FBIDToken (Token)\nimport jwtDecode from \"jwt-decode\";\n//Redux, Provider and Store Initialization\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/stores\";\n//Material UI Framework\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport themestyle from \"./utils/appstyles\";\nimport \"./App.css\";\n//Placeholder\nimport \"./utils/ph.css\";\n//Component pages to be used in switch routes\nimport home from \"./pages/home\";\nimport login from \"./pages/login\";\nimport signup from \"./pages/signup\";\nimport logout from \"./pages/logout\";\nimport { logoutUser } from \"./redux/actions/userActions\";\n//For altering the headers\nimport axios from \"axios\";\n//THIS COMPONENT WILL RUN ONLY ONCE UNLESS IT IS RELOADED.\n//get the token from localstorage\nconst token = localStorage.FBIdToken;\n//check if theres a token\nif (token) {\n  //if we have the token, decode it!\n  const decodedToken = jwtDecode(token);\n  //get the expiration time = exp.\n  if (decodedToken.exp * 1000 < Date.now()) {\n    //the token must be expired or modified, nonetheless, logout the user\n    store.dispatch(logoutUser());\n  } else {\n    //token was valid verified\n    //we are setting the HEADERS everytime we reload SPO page.\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  }\n} else {\n  //no token found, clear everything and goto login\n  store.dispatch(logoutUser());\n}\n//setting the theme using appStyles.js\nconst theme = createMuiTheme(themestyle);\n//This component contains the main routing logic of the Frontend.\n//For navigation, we use can AppBar/Navbar\n//Listener of the url <Switch>, redirect to the site\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={home} />\n            <Route exact path=\"/login\" component={login} />\n            <Route exact path=\"/signup\" component={signup} />\n            <Route exact path=\"/logout\" component={logout} />\n          </Switch>\n        </Router>\n      </Provider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","export default {\r\n  palette: {\r\n    primary: {\r\n      light: \"#81c784\",\r\n      main: \"#4caf50\",\r\n      contrastText: \"#fff\",\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      light: \"#81c784\",\r\n      main: \"#388e3c\",\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: \"#fff\",\r\n    },\r\n  },\r\n  loginRegister: {\r\n    formContainer: { fontWeight: \"bold\", color: \"#434343\" },\r\n    pageImage: { textAlign: \"center\" },\r\n    textField: { marginTop: -10 },\r\n    button: { marginTop: 20 },\r\n    progress: { marginBottom: 20 },\r\n  },\r\n  marginLeftRight: {\r\n    placeHolder: { marginLeft: 10, marginRight: 10 },\r\n  },\r\n  shouts: {\r\n    card: { display: \"flex\", marginBottom: 10, marginRight: 10 },\r\n    image: { minWidth: 100, margin: 5, borderRadius: 5 },\r\n    content: { objectFit: \"cover\" },\r\n  },\r\n  profile: {\r\n    card: { display: \"flex\" },\r\n    image: {\r\n      height: 240,\r\n      Width: 100,\r\n      marginTop: 20,\r\n      marginLeft: 50,\r\n      marginRight: 50,\r\n      borderRadius: 5,\r\n    },\r\n    content: { objectFit: \"cover\" },\r\n  },\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.469b19fe.png\";"],"sourceRoot":""}